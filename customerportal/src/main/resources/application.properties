#================MVC===========
spring.mvc.view.prefix = /views/
spring.mvc.view.suffix = .html

# ===============================
# = DATA SOURCE
# ===============================
# Set here configurations for the database connection
#server.port=8081
# Connection url for the database "netgloo_blog"
#spring.datasource.url = jdbc:mysql://localhost:3306/century_link_db?useSSL=false
spring.datasource.url = jdbc:h2:mem:myDb;DB_CLOSE_DELAY=-1
spring.datasource.driver-class-name=org.h2.Driver
# Username and password
spring.datasource.username=sa
spring.datasource.password=sa

# Keep the connection alive if idle for a long time (needed in production)
spring.datasource.tomcat.testWhileIdle = true
spring.datasource.tomcat.validationQuery = SELECT 1

# ===============================
# = JPA / HIBERNATE
# ===============================
# Use spring.jpa.properties.* for Hibernate native properties (the prefix is
# stripped before adding them to the entity manager).
# Show or not log for each sql query
spring.jpa.show-sql=true
# Hibernate ddl auto (create, create-drop, update): with "update" the database
# schema will be automatically updated accordingly to java entities found in
# the project
spring.jpa.hibernate.ddl-auto=create-drop
# Naming strategy
spring.jpa.hibernate.naming-strategy = org.hibernate.cfg.DefaultComponentSafeNamingStrategy
# Allows Hibernate to generate SQL optimized for a particular DBMS
#spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5Dialect
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.H2Dialect
spring.jackson.serialization.fail-on-empty-beans=false
